name: macOS Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v1.0)'
        required: true
        default: 'v4.0'

permissions:
  contents: write

jobs:
  release:
    # 1. 移除 strategy matrix，只在 macos-latest 上运行
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Install dependencies
        run: |
          brew update
          brew install create-dmg
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Build App
        run: |
          # 设置版本号
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(git describe --tags)
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # 更新应用版本号
          sed -i "" "s/v0.0.0/$VERSION/g" ./main.py
          sed -i "" "s/v0.0.0/$VERSION/g" ./setup.py
          
          # 安装依赖 (调整顺序)
          # 1. 首先强制使用 x86_64 架构安装，以获取 x86_64 版本的依赖
          arch -x86_64 python3 -m pip install -r requirements.txt
          arch -x86_64 python3 -m pip install py2app
          
          # 2. 然后正常安装 arm64 版本。这会覆盖 x86_64 的库，但能确保后续的 pyuic5 命令可以正常运行。
          #    --ignore-installed 是关键，它会强制重新安装 arm64 版本。
          pip install --ignore-installed -r requirements.txt
          pip install --ignore-installed py2app
          
          # 生成UI文件 (现在可以找到 arm64 的库了)
          pyuic5 -o ui.py main.ui
          pyrcc5 -o resource_rc.py resource.qrc
          
          # 3. 使用 --arch=universal2 打包通用应用
          #    py2app 能够找到两个架构的库并进行打包
          python setup.py py2app --arch=universal2
          
          # 显示应用内容以便调试
          ls -la dist/cloud-clipboard-go.app/Contents/
          ls -la dist/cloud-clipboard-go.app/Contents/MacOS/
          ls -la dist/cloud-clipboard-go.app/Contents/Resources/
          
      - name: Create DMG
        run: |
          mkdir -p staging
          cp -r "dist/cloud-clipboard-go.app" staging/
          
          # 3. 修改 DMG 文件名，不再包含架构
          create-dmg \
            --volname "cloud-clipboard-go" \
            --volicon "icon.png" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --icon "cloud-clipboard-go.app" 175 190 \
            --hide-extension "cloud-clipboard-go.app" \
            --app-drop-link 425 190 \
            "cloud-clipboard-go-${{ env.VERSION }}-macOS-universal.dmg" \
            staging/
            
      - name: Create ZIP backup
        run: |
          cd dist
          # 4. 修改 ZIP 文件名
          zip -r "cloud-clipboard-go-${{ env.VERSION }}-macOS-universal.zip" "cloud-clipboard-go.app"
          cd ..
          
      - name: Calculate SHA256
        id: sha256
        run: |
          # 5. 更新 DMG 路径
          DMG_PATH="cloud-clipboard-go-${{ env.VERSION }}-macOS-universal.dmg"
          SHA256=$(shasum -a 256 "$DMG_PATH" | awk '{print $1}')
          echo "sha256_value=$SHA256" >> $GITHUB_OUTPUT

      - name: Store SHA256 for Homebrew Tap
        run: |
          mkdir -p artifact
          echo "${{ steps.sha256.outputs.sha256_value }}" > artifact/sha256.txt
          echo "${{ env.VERSION }}" > artifact/version.txt

      - name: Upload SHA256 and Version
        uses: actions/upload-artifact@v4
        with:
          name: artifact-info
          path: artifact/
      
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}
          files: |
            cloud-clipboard-go-*-universal.dmg
            dist/cloud-clipboard-go-*-universal.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew-tap:
    name: Update Homebrew Tap
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 6. 简化 artifact 下载
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact-info
          path: ./artifact

      - name: Update Tap Repository
        run: |
          # 7. 简化变量读取
          VERSION=$(cat ./artifact/version.txt)
          SHA256=$(cat ./artifact/sha256.txt)

          echo "Updating to version: $VERSION"
          echo "SHA256: $SHA256"

          git clone https://x-access-token:${{ secrets.TAP_TOKEN }}@github.com/jonnyan404/homebrew-tap.git
          cd homebrew-tap

          mkdir -p Casks

          # 8. 简化 sed 命令
          cat ../homebrew/cloud-clipboard-go.rb.template | \
            sed "s/VERSION_PLACEHOLDER/$VERSION/g" | \
            sed "s/SHA256_PLACEHOLDER/$SHA256/g" > \
            Casks/cloud-clipboard-go.rb

          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          git add Casks/cloud-clipboard-go.rb
          if ! git diff --staged --quiet; then
            git commit -m "Update cloud-clipboard-go to $VERSION"
            git push
          else
            echo "No changes to commit."
          fi
